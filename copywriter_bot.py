import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)
import openai  # Only needed if using OpenAI API

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY'  # Optional, only for AI generation

# Conversation states
SELECTING_ACTION, WRITING_BRIEF, GENERATING_TEXT, REVIEWING = range(4)

# Initialize OpenAI (if using)
if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and ask user what they want to do."""
    reply_keyboard = [['–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥']]
    
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    
    return SELECTING_ACTION

def select_action(update: Update, context: CallbackContext) -> int:
    """Store the selected action and ask for details."""
    user_choice = update.message.text
    context.user_data['choice'] = user_choice
    
    if user_choice == '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç':
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Å—Ç.\n\n"
            "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –æ —á–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–µ–Ω –ø–æ—Å—Ç –¥–ª—è Instagram –æ –Ω–æ–≤–æ–º —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–µ, —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –∂–µ–Ω—â–∏–Ω—ã 25-40 –ª–µ—Ç, —Å—Ç–∏–ª—å - –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif user_choice == '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤':
        update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –ø–æ–º–æ–≥—É —Å –æ—Ç–∑—ã–≤–æ–º.\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É, –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –∫–∞–∫–æ–π —Ç–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –æ—Ç–∑—ã–≤–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, —Å –∫—Ä–∏—Ç–∏–∫–æ–π –∏ —Ç.–¥.).\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–µ–Ω –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–æ–≤—ã–π iPhone, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ –ø–æ –±–∞—Ç–∞—Ä–µ–µ'",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif user_choice == '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥':
        update.message.reply_text(
            "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n\n"
            "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É: —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å (—Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, email-—Ä–∞—Å—Å—ã–ª–∫—É –∏ —Ç.–¥.), "
            "–∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞ –∫—É—Ä—Å–∞ –ø–æ Python, –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ - –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ –ø–æ–º–æ—â—å —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º, –¶–ê - –Ω–æ–≤–∏—á–∫–∏ –≤ IT'",
            reply_markup=ReplyKeyboardRemove(),
        )
    
    return WRITING_BRIEF

def receive_brief(update: Update, context: CallbackContext) -> int:
    """Receive the user's brief and generate or ask for more info."""
    brief = update.message.text
    context.user_data['brief'] = brief
    
    # Here you would typically process the brief and generate content
    # For this example, we'll simulate generation
    
    update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # Simulate generation delay
    context.job_queue.run_once(generate_text, 3, context=update.message.chat_id)
    
    return GENERATING_TEXT

def generate_text(context: CallbackContext):
    """Generate text based on the brief (simulated or using AI)."""
    job = context.job
    chat_id = job.context
    
    # In a real bot, you would use AI or templates here
    # This is a simplified example
    
    # Example of using OpenAI API (uncomment if you have API key)
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a professional copywriter."},
                {"role": "user", "content": context.user_data['brief']}
            ]
        )
        generated_text = response.choices[0].message.content
    except Exception as e:
        generated_text = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
    """
    
    # Fallback text if not using AI
    choice = context.user_data.get('choice', '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç')
    brief = context.user_data.get('brief', '')
    
    if choice == '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç':
        generated_text = f"""üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:

{brief}

üîπ –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞:

"–î—Ä—É–∑—å—è, —É –Ω–∞—Å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! üéâ

–ú—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞ [–ù–∞–∑–≤–∞–Ω–∏–µ] –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä–æ–¥–∞! üí™

‚ú® –ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–µ –∑–∞–ª—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
‚ú® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
‚ú® –ó–æ–Ω—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–∏–Ω–≥–∞, –π–æ–≥–∏ –∏ –∫—Ä–æ—Å—Å—Ñ–∏—Ç–∞
‚ú® –£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏—è—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞

–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ - —Å–∫–∏–¥–∫–∞ 30% –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü! 

–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–µ–π –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏! üöÄ

#—Ñ–∏—Ç–Ω–µ—Å #–∑–¥–æ—Ä–æ–≤—å–µ #—Å–ø–æ—Ä—Ç #—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ #[–≥–æ—Ä–æ–¥]"""
    elif choice == '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤':
        generated_text = f"""üìù –û—Ç–∑—ã–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:

{brief}

üîπ –í–æ—Ç –ø—Ä–∏–º–µ—Ä –æ—Ç–∑—ã–≤–∞:

"–ü–æ–ª—å–∑—É—é—Å—å –Ω–æ–≤—ã–º iPhone —É–∂–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –∏ —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏.

üëç –ü–ª—é—Å—ã:
- –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π —ç–∫—Ä–∞–Ω —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
- –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
- –û—Ç–ª–∏—á–Ω–∞—è –∫–∞–º–µ—Ä–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–æ—á–Ω—ã–µ —Å–Ω–∏–º–∫–∏
- –ü—Ä–∏—è—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ —É–¥–æ–±–Ω—ã–π —Ä–∞–∑–º–µ—Ä

üëé –ú–∏–Ω—É—Å—ã:
- –ë–∞—Ç–∞—Ä–µ—è –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª—É—á—à–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
- –ë—ã—Å—Ç—Ä–æ –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–≥—Ä–∞—Ö –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Å—ä–µ–º–∫–µ

–í —Ü–µ–ª–æ–º - –æ—Ç–ª–∏—á–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é, –µ—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º."
"""
    else:  # –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥
        generated_text = f"""‚úçÔ∏è –†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:

{brief}

üîπ –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞:

"–•–æ—Ç–∏—Ç–µ –æ—Å–≤–æ–∏—Ç—å Python –∏ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É –≤ IT? üêç

–ù–∞—à –∫—É—Ä—Å Python Pro - —ç—Ç–æ:

‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤ 24/7
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥

–ó–∞ 3 –º–µ—Å—è—Ü–∞ –≤—ã:
- –ù–∞—É—á–∏—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å —á–∏—Å—Ç—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥
- –û—Å–≤–æ–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
- –†–∞–∑—Ä–∞–±–æ—Ç–∞–µ—Ç–µ 5 —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å! –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.

#Python #–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ #IT #–ö—É—Ä—Å—ã #–ö–∞—Ä—å–µ—Ä–∞"
"""
    
    context.bot.send_message(chat_id=chat_id, text=generated_text)
    context.bot.send_message(
        chat_id=chat_id,
        text="–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ú–æ–≥—É –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.",
        reply_markup=ReplyKeyboardMarkup(
            [['–ù—Ä–∞–≤–∏—Ç—Å—è', '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π'], ['–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏']],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )

def review_text(update: Update, context: CallbackContext) -> int:
    """Let the user review the generated text."""
    feedback = update.message.text
    
    if feedback == '–ù—Ä–∞–≤–∏—Ç—Å—è':
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –µ—â–µ –ø–æ–º–æ—â—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    elif feedback == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π':
        update.message.reply_text(
            "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...",
            reply_markup=ReplyKeyboardRemove()
        )
        context.job_queue.run_once(generate_text, 3, context=update.message.chat_id)
        return GENERATING_TEXT
    else:  # –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏
        update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏: –∫–∞–∫–∏–µ —á–∞—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å.",
            reply_markup=ReplyKeyboardRemove()
        )
        return REVIEWING

def apply_edits(update: Update, context: CallbackContext) -> int:
    """Apply user's edits to the text."""
    edits = update.message.text
    context.user_data['edits'] = edits
    
    update.message.reply_text(
        "–£—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –ø—Ä–∞–≤–∫–∏ –∏ —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # Here you would typically regenerate with edits
    # For simplicity, we'll just show the same text with a note
    context.job_queue.run_once(
        lambda ctx: ctx.bot.send_message(
            chat_id=ctx.job.context,
            text=f"–í–æ—Ç —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–∞–≤–æ–∫:\n\n{context.user_data.get('brief', '')}\n\n(–ó–¥–µ—Å—å –±—ã–ª –±—ã —Ç–µ–∫—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: {edits})"
        ),
        3,
        context=update.message.chat_id
    )
    
    return review_text(update, context)

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel the conversation."""
    update.message.reply_text(
        '–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main() -> None:
    """Run the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater(TOKEN)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler with the states
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ACTION: [
                MessageHandler(
                    Filters.regex('^(–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç|–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤|–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥)$'), select_action
                )
            ],
            WRITING_BRIEF: [
                MessageHandler(Filters.text & ~Filters.command, receive_brief)
            ],
            GENERATING_TEXT: [
                MessageHandler(
                    Filters.regex('^(–ù—Ä–∞–≤–∏—Ç—Å—è|–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π|–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏)$'), review_text
                )
            ],
            REVIEWING: [
                MessageHandler(Filters.text & ~Filters.command, apply_edits)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()

if __name__ == '__main__':
    main()
